# PIPELINE DEFINITION
# Name: heart-disease-predictor-training-pipeline
# Inputs:
#    data_bucket: str
#    dataset_uri: str
#    model_repo: str
#    model_repo_uri: str
#    project_id: str
#    thresholds_dict_str: str
#    trigger_id: str
# Outputs:
#    dt-model-evaluation-kpi: system.Metrics
#    dt-model-evaluation-metrics: system.ClassificationMetrics
#    lr-model-evaluation-kpi: system.Metrics
#    lr-model-evaluation-metrics: system.ClassificationMetrics
components:
  comp-compare-model:
    executorLabel: exec-compare-model
    inputDefinitions:
      artifacts:
        dt_metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        lr_metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
    outputDefinitions:
      parameters:
        accuracy:
          parameterType: NUMBER_DOUBLE
        model_name:
          parameterType: STRING
  comp-condition-1:
    dag:
      tasks:
        condition-2:
          componentRef:
            name: comp-condition-2
          inputs:
            artifacts:
              pipelinechannel--train-dt-model:
                componentInputArtifact: pipelinechannel--train-dt-model
            parameters:
              pipelinechannel--compare-model-accuracy:
                componentInputParameter: pipelinechannel--compare-model-accuracy
              pipelinechannel--compare-model-model_name:
                componentInputParameter: pipelinechannel--compare-model-model_name
              pipelinechannel--dt-model-evaluation-approval:
                componentInputParameter: pipelinechannel--dt-model-evaluation-approval
              pipelinechannel--model_repo:
                componentInputParameter: pipelinechannel--model_repo
              pipelinechannel--project_id:
                componentInputParameter: pipelinechannel--project_id
              pipelinechannel--trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: Did DT Model Pass Threshold
          triggerPolicy:
            condition: inputs.parameter_values['pipelinechannel--dt-model-evaluation-approval']
              == true
    inputDefinitions:
      artifacts:
        pipelinechannel--train-dt-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-accuracy:
          parameterType: NUMBER_DOUBLE
        pipelinechannel--compare-model-model_name:
          parameterType: STRING
        pipelinechannel--dt-model-evaluation-approval:
          parameterType: BOOLEAN
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-condition-2:
    dag:
      tasks:
        run-build-trigger:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-run-build-trigger
          dependentTasks:
          - upload-model-to-gcs
          inputs:
            parameters:
              project_id:
                componentInputParameter: pipelinechannel--project_id
              trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: run-build-trigger
        upload-model-to-gcs:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-dt-model
            parameters:
              accuracy:
                componentInputParameter: pipelinechannel--compare-model-accuracy
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs
    inputDefinitions:
      artifacts:
        pipelinechannel--train-dt-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-accuracy:
          parameterType: NUMBER_DOUBLE
        pipelinechannel--compare-model-model_name:
          parameterType: STRING
        pipelinechannel--dt-model-evaluation-approval:
          parameterType: BOOLEAN
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-condition-3:
    dag:
      tasks:
        condition-4:
          componentRef:
            name: comp-condition-4
          inputs:
            artifacts:
              pipelinechannel--train-lr-model:
                componentInputArtifact: pipelinechannel--train-lr-model
            parameters:
              pipelinechannel--compare-model-accuracy:
                componentInputParameter: pipelinechannel--compare-model-accuracy
              pipelinechannel--compare-model-model_name:
                componentInputParameter: pipelinechannel--compare-model-model_name
              pipelinechannel--lr-model-evaluation-approval:
                componentInputParameter: pipelinechannel--lr-model-evaluation-approval
              pipelinechannel--model_repo:
                componentInputParameter: pipelinechannel--model_repo
              pipelinechannel--project_id:
                componentInputParameter: pipelinechannel--project_id
              pipelinechannel--trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: Did LR Model Pass Threshold
          triggerPolicy:
            condition: inputs.parameter_values['pipelinechannel--lr-model-evaluation-approval']
              == true
    inputDefinitions:
      artifacts:
        pipelinechannel--train-lr-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-accuracy:
          parameterType: NUMBER_DOUBLE
        pipelinechannel--compare-model-model_name:
          parameterType: STRING
        pipelinechannel--lr-model-evaluation-approval:
          parameterType: BOOLEAN
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-condition-4:
    dag:
      tasks:
        run-build-trigger-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-run-build-trigger-2
          dependentTasks:
          - upload-model-to-gcs-2
          inputs:
            parameters:
              project_id:
                componentInputParameter: pipelinechannel--project_id
              trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: run-build-trigger-2
        upload-model-to-gcs-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs-2
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-lr-model
            parameters:
              accuracy:
                componentInputParameter: pipelinechannel--compare-model-accuracy
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        pipelinechannel--train-lr-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-accuracy:
          parameterType: NUMBER_DOUBLE
        pipelinechannel--compare-model-model_name:
          parameterType: STRING
        pipelinechannel--lr-model-evaluation-approval:
          parameterType: BOOLEAN
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-dt-model-evaluation:
    executorLabel: exec-dt-model-evaluation
    inputDefinitions:
      artifacts:
        model_dt:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        deployed_model_acc:
          parameterType: NUMBER_DOUBLE
        thresholds_dict_str:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        kpi:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        metrics:
          artifactType:
            schemaTitle: system.ClassificationMetrics
            schemaVersion: 0.0.1
      parameters:
        approval:
          parameterType: BOOLEAN
  comp-fetch-prod-model:
    executorLabel: exec-fetch-prod-model
    inputDefinitions:
      artifacts:
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        model_repo_uri:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: NUMBER_DOUBLE
  comp-importer:
    executorLabel: exec-importer
    inputDefinitions:
      parameters:
        uri:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-lr-model-evaluation:
    executorLabel: exec-lr-model-evaluation
    inputDefinitions:
      artifacts:
        model_lr:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        deployed_model_acc:
          parameterType: NUMBER_DOUBLE
        thresholds_dict_str:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        kpi:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        metrics:
          artifactType:
            schemaTitle: system.ClassificationMetrics
            schemaVersion: 0.0.1
      parameters:
        approval:
          parameterType: BOOLEAN
  comp-run-build-trigger:
    executorLabel: exec-run-build-trigger
    inputDefinitions:
      parameters:
        project_id:
          parameterType: STRING
        trigger_id:
          parameterType: STRING
  comp-run-build-trigger-2:
    executorLabel: exec-run-build-trigger-2
    inputDefinitions:
      parameters:
        project_id:
          parameterType: STRING
        trigger_id:
          parameterType: STRING
  comp-train-dt:
    executorLabel: exec-train-dt
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-train-lr:
    executorLabel: exec-train-lr
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-train-test-split:
    executorLabel: exec-train-test-split
    inputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        dataset_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        dataset_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-upload-model-to-gcs:
    executorLabel: exec-upload-model-to-gcs
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        accuracy:
          parameterType: NUMBER_DOUBLE
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-model-to-gcs-2:
    executorLabel: exec-upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        accuracy:
          parameterType: NUMBER_DOUBLE
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-compare-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - compare_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef compare_model(\n    dt_metrics: Input[Metrics],\n    lr_metrics:\
          \ Input[Metrics]\n) -> NamedTuple('outputs', [('model_name', str), ('accuracy',\
          \ float)]):\n    import logging\n\n    logging.basicConfig(level=logging.INFO)\n\
          \n    # Extracting the accuracy from the input metrics\n    dt_acc = dt_metrics.metadata[\"\
          accuracy\"]\n    lr_acc = lr_metrics.metadata[\"accuracy\"]\n\n    # Logging\
          \ the accuracy values\n    logging.info(f\"Decision Tree Accuracy: {dt_acc}\"\
          )\n    logging.info(f\"Logistic Regression Accuracy: {lr_acc}\")\n\n   \
          \ # Comparing accuracies and returning the appropriate model with its accuracy\n\
          \    if dt_acc > lr_acc:\n        logging.info(\"Decision Tree model selected.\"\
          )\n        return (\"DT\", dt_acc)\n    else:\n        logging.info(\"Logistic\
          \ Regression model selected.\")\n        return (\"LR\", lr_acc)\n\n"
        image: python:3.10.7-slim
    exec-dt-model-evaluation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - dt_model_evaluation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'numpy' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef dt_model_evaluation(\n    test_set:  Input[Dataset],\n    model_dt:\
          \ Input[Model],\n    thresholds_dict_str: str,\n    metrics: Output[ClassificationMetrics],\n\
          \    kpi: Output[Metrics],\n    deployed_model_acc: float\n) -> NamedTuple('outputs',\
          \ approval=bool):\n\n    import pandas as pd\n    from sklearn.metrics import\
          \ roc_curve, confusion_matrix, accuracy_score, roc_auc_score\n    import\
          \ json\n    import pickle\n    from numpy import nan_to_num\n\n    # Define\
          \ a function to check if the accuracy is above the threshold\n    def threshold_check(val1,\
          \ val2):\n        return val1 >= val2\n\n    # Load the test dataset\n \
          \   data = pd.read_csv(test_set.path + \".csv\")\n\n    # Load the saved\
          \ model\n    with open(model_dt.path + \".pkl\", 'rb') as file:\n      \
          \  model = pickle.load(file)\n\n    # Predict the target values\n    y_test\
          \ = data.drop(columns=[\"HeartDisease\"])\n    y_target = data['HeartDisease']\n\
          \    y_pred = model.predict(y_test)\n    y_scores = model.predict_proba(y_test)[:,\
          \ 1]\n\n    # Calculate the ROC curve\n    fpr, tpr, thresholds = roc_curve(y_true=y_target,\
          \ y_score=y_scores, pos_label=True)\n    thresholds = nan_to_num(thresholds)\n\
          \    metrics.log_roc_curve(fpr, tpr, thresholds)\n\n    # Calculate the\
          \ confusion matrix\n    metrics.log_confusion_matrix(\n        ['Negative',\
          \ 'Positive'],\n        confusion_matrix(y_target, y_pred).tolist(),\n \
          \   )\n\n    # Calculate the accuracy\n    accuracy = accuracy_score(y_target,\
          \ y_pred.round())\n    thresholds_dict = json.loads(thresholds_dict_str)\n\
          \    model_dt.metadata[\"accuracy\"] = float(accuracy)\n    kpi.log_metric(\"\
          accuracy\", float(accuracy))\n\n    approval_value = threshold_check(roc_auc_score(y_target,\
          \ y_scores), thresholds_dict['roc']) and float(accuracy) > deployed_model_acc\n\
          \    return (approval_value,)\n\n"
        image: python:3.10.7-slim
    exec-fetch-prod-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - fetch_prod_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ 'pandas' 'scikit-learn' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef fetch_prod_model(\n    project_id: str,\n    model_repo_uri:\
          \ str,\n    test_set:  Input[Dataset],\n) -> float:\n    from google.cloud\
          \ import storage\n    import pandas as pd\n    import pickle\n    from sklearn.metrics\
          \ import accuracy_score\n    import logging\n    import sys\n    from io\
          \ import BytesIO\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \    \n\n    try:\n        # Initialize the Google Cloud Storage client\n\
          \        client = storage.Client(project=project_id)\n\n        # Get the\
          \ bucket where the model is stored\n        bucket = client.bucket(model_repo_uri)\n\
          \n        # Get the specific blob for the model file\n        blob = bucket.blob('heart_disease_model.pkl')\n\
          \n        # Download the blob content as bytes and load the model\n    \
          \    model_data = blob.download_as_bytes()\n        model = pickle.load(BytesIO(model_data))\n\
          \n        # Load the test dataset\n        data = pd.read_csv(test_set.path\
          \ + \".csv\")\n\n        # Prepare the test and target sets\n        y_test\
          \ = data.drop(columns=[\"HeartDisease\"])\n        y_target = data['HeartDisease']\n\
          \n        # Predict the target values and calculate accuracy\n        y_pred\
          \ = model.predict(y_test)\n        accuracy = accuracy_score(y_target, y_pred.round())\n\
          \n        # Reload the blob to ensure it's up-to-date\n        blob.reload()\n\
          \n        # Get the metadata of the model file\n        metadata = blob.metadata\n\
          \        if metadata and \"accuracy\" in metadata:\n            if float(metadata[\"\
          accuracy\"]) > accuracy:\n                logging.CRITICAL(\"Model accuracy\
          \ is below the accuracy at deployment!\")\n\n        return float(accuracy)\n\
          \n    except Exception as e:\n        # Log the exception if needed (optional)\n\
          \        logging.error(f\"Error occurred: {e}\")\n        return 0.0\n\n"
        image: python:3.10.7-slim
    exec-importer:
      importer:
        artifactUri:
          runtimeParameter: uri
        typeSchema:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    exec-lr-model-evaluation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - lr_model_evaluation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'numpy' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef lr_model_evaluation(\n    test_set:  Input[Dataset],\n    model_lr:\
          \ Input[Model],\n    thresholds_dict_str: str,\n    metrics: Output[ClassificationMetrics],\n\
          \    kpi: Output[Metrics],\n    deployed_model_acc: float\n) -> NamedTuple('outputs',\
          \ approval=bool):\n\n    import pandas as pd\n    from sklearn.metrics import\
          \ roc_curve, confusion_matrix, accuracy_score, roc_auc_score\n    import\
          \ json\n    import pickle\n    from numpy import nan_to_num\n\n    # Define\
          \ a function to check if the accuracy is above the threshold\n    def threshold_check(val1,\
          \ val2):\n        return val1 >= val2\n\n    # Load the test dataset\n \
          \   data = pd.read_csv(test_set.path + \".csv\")\n\n    # Load the saved\
          \ model\n    with open(model_lr.path + \".pkl\", 'rb') as file:\n      \
          \  model = pickle.load(file)\n\n    # Predict the target values\n    y_test\
          \ = data.drop(columns=[\"HeartDisease\"])\n    y_target = data['HeartDisease']\n\
          \    y_pred = model.predict(y_test)\n    y_scores = model.predict_proba(y_test)[:,\
          \ 1]\n\n    # Calculate the ROC curve\n    fpr, tpr, thresholds = roc_curve(y_true=y_target,\
          \ y_score=y_scores, pos_label=True)\n    thresholds = nan_to_num(thresholds)\n\
          \    metrics.log_roc_curve(fpr, tpr, thresholds)\n\n    # Calculate the\
          \ confusion matrix\n    metrics.log_confusion_matrix(\n        ['Negative',\
          \ 'Positive'],\n        confusion_matrix(y_target, y_pred).tolist(),\n \
          \   )\n\n    # Calculate the accuracy\n    accuracy = accuracy_score(y_target,\
          \ y_pred.round())\n    thresholds_dict = json.loads(thresholds_dict_str)\n\
          \    model_lr.metadata[\"accuracy\"] = float(accuracy)\n    kpi.log_metric(\"\
          accuracy\", float(accuracy))\n\n    approval_value = threshold_check(roc_auc_score(y_target,\
          \ y_scores), thresholds_dict['roc']) and float(accuracy) > deployed_model_acc\n\
          \    return (approval_value,)\n\n"
        image: python:3.10.7-slim
    exec-run-build-trigger:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - run_build_trigger
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-build'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef run_build_trigger(project_id:str, trigger_id:str):\n    import\
          \ sys\n    from google.cloud.devtools import cloudbuild_v1    \n    import\
          \ logging \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \ \n\n    # Create a client\n    client = cloudbuild_v1.CloudBuildClient()\n\
          \    name = f\"projects/{project_id}/locations/us-central1/triggers/{trigger_id}\"\
          \n    # Initialize request argument(s)\n    request = cloudbuild_v1.RunBuildTriggerRequest(\
          \        \n        project_id=project_id,\n        trigger_id=trigger_id,\n\
          \        name=name\n    )\n\n    # Make the request\n    operation = client.run_build_trigger(request=request)\n\
          \n    logging.info(\"Trigger the CI-CD Pipeline: \" + trigger_id)\n\n"
        image: python:3.10.7-slim
    exec-run-build-trigger-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - run_build_trigger
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-build'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef run_build_trigger(project_id:str, trigger_id:str):\n    import\
          \ sys\n    from google.cloud.devtools import cloudbuild_v1    \n    import\
          \ logging \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \ \n\n    # Create a client\n    client = cloudbuild_v1.CloudBuildClient()\n\
          \    name = f\"projects/{project_id}/locations/us-central1/triggers/{trigger_id}\"\
          \n    # Initialize request argument(s)\n    request = cloudbuild_v1.RunBuildTriggerRequest(\
          \        \n        project_id=project_id,\n        trigger_id=trigger_id,\n\
          \        name=name\n    )\n\n    # Make the request\n    operation = client.run_build_trigger(request=request)\n\
          \n    logging.info(\"Trigger the CI-CD Pipeline: \" + trigger_id)\n\n"
        image: python:3.10.7-slim
    exec-train-dt:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_dt
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_dt(features: Input[Dataset], model: Output[Model]):\n \
          \   '''train a Decision Tree model'''\n    import pandas as pd\n    from\
          \ sklearn.tree import DecisionTreeClassifier       \n    import pickle \n\
          \n    # Load the dataset\n    data = pd.read_csv(features.path + \".csv\"\
          )\n\n    # Initialize and train the Decision Regression model\n    model_dt\
          \ = DecisionTreeClassifier(random_state=73, max_depth = 4, min_samples_leaf\
          \ = 1)\n    model_dt.fit(data.drop('HeartDisease', axis=1), data['HeartDisease'])\n\
          \n    # Add metadata to the model\n    model.metadata[\"framework\"] = \"\
          Decision Tree\"\n\n    # Save the trained model to a file\n    file_name\
          \ =f\"{model.path}.pkl\"\n    with open(file_name, 'wb') as file:  \n  \
          \      pickle.dump(model_dt, file)\n\n"
        image: python:3.10.7-slim
    exec-train-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_lr(features: Input[Dataset], model: Output[Model]):\n \
          \   '''train a LogisticRegression model'''\n    import pandas as pd\n  \
          \  from sklearn.linear_model import LogisticRegression        \n    import\
          \ pickle \n\n    # Load the dataset\n    data = pd.read_csv(features.path\
          \ + \".csv\")\n\n    # Initialize and train the Logistic Regression model\n\
          \    model_lr = LogisticRegression(random_state=73, C=10, penalty= 'l2')\n\
          \    model_lr.fit(data.drop('HeartDisease', axis=1), data['HeartDisease'])\n\
          \n    # Add metadata to the model\n    model.metadata[\"framework\"] = \"\
          Logistic Regression\"\n\n    # Save the trained model to a file\n    file_name\
          \ =f\"{model.path}.pkl\"\n    with open(file_name, 'wb') as file:  \n  \
          \      pickle.dump(model_lr, file)\n\n"
        image: python:3.10.7-slim
    exec-train-test-split:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_test_split
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_test_split(dataset: Input[Dataset], dataset_train: Output[Dataset],\
          \ dataset_test: Output[Dataset]):\n    '''train_test_split'''\n    import\
          \ pandas as pd\n    import logging \n    import sys\n    from sklearn.model_selection\
          \ import train_test_split\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\
          \n    # Function to check and encode values\n    def map_column(df, column_name,\
          \ mapping_dict):\n        df[column_name] = df[column_name].map(mapping_dict)\
          \ \n\n    df = pd.read_csv(dataset.path, index_col=None)\n\n    # Encode\
          \ categorical features and log the transformations to then know which to\
          \ put in the frontend\n    mappings = {\n        'Sex': {'M': 0, 'F': 1},\n\
          \        'ChestPainType': {'ATA': 0, 'NAP': 1, 'ASY': 2, 'TA': 3},\n   \
          \     'ExerciseAngina': {'N': 0, 'Y': 1},\n        'ST_Slope': {'Up': 0,\
          \ 'Flat': 1, 'Down': 2}\n    }\n\n    # Drop highly correlated features\
          \ and missing values\n    df = df.drop(['RestingBP', 'RestingECG'], axis=1)\n\
          \n    # Apply the mappings using the function and the nested dictionary\n\
          \    for column, mapping in mappings.items():\n        map_column(df, column,\
          \ mapping)\n\n    # Drop rows with missing values\n    df = df.dropna()\n\
          \n    train, test = train_test_split(df, test_size=0.3, random_state=73)\n\
          \    train.to_csv(dataset_train.path + \".csv\" , index=False, encoding='utf-8-sig')\n\
          \    test.to_csv(dataset_test.path + \".csv\" , index=False, encoding='utf-8-sig')\n\
          \n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model], accuracy: float):\n    '''upload model to gcs'''\n    from\
          \ google.cloud import storage   \n    import logging \n    import sys\n\n\
          \    # Set up logging\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \    \n\n    # Initialize the Google Cloud Storage client\n    client =\
          \ storage.Client(project=project_id)\n\n    # Get the bucket where the model\
          \ will be uploaded\n    bucket = client.bucket(model_repo)\n\n    # Create\
          \ a blob object for the model file\n    blob = bucket.blob('heart_disease_model.pkl')\n\
          \    blob.metadata = {\"accuracy\": accuracy}\n\n    # Upload the model\
          \ file to the bucket\n    source_file_name = model.path + '.pkl'\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model], accuracy: float):\n    '''upload model to gcs'''\n    from\
          \ google.cloud import storage   \n    import logging \n    import sys\n\n\
          \    # Set up logging\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \    \n\n    # Initialize the Google Cloud Storage client\n    client =\
          \ storage.Client(project=project_id)\n\n    # Get the bucket where the model\
          \ will be uploaded\n    bucket = client.bucket(model_repo)\n\n    # Create\
          \ a blob object for the model file\n    blob = bucket.blob('heart_disease_model.pkl')\n\
          \    blob.metadata = {\"accuracy\": accuracy}\n\n    # Upload the model\
          \ file to the bucket\n    source_file_name = model.path + '.pkl'\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
pipelineInfo:
  name: heart-disease-predictor-training-pipeline
root:
  dag:
    outputs:
      artifacts:
        dt-model-evaluation-kpi:
          artifactSelectors:
          - outputArtifactKey: kpi
            producerSubtask: dt-model-evaluation
        dt-model-evaluation-metrics:
          artifactSelectors:
          - outputArtifactKey: metrics
            producerSubtask: dt-model-evaluation
        lr-model-evaluation-kpi:
          artifactSelectors:
          - outputArtifactKey: kpi
            producerSubtask: lr-model-evaluation
        lr-model-evaluation-metrics:
          artifactSelectors:
          - outputArtifactKey: metrics
            producerSubtask: lr-model-evaluation
    tasks:
      compare-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-compare-model
        dependentTasks:
        - dt-model-evaluation
        - lr-model-evaluation
        inputs:
          artifacts:
            dt_metrics:
              taskOutputArtifact:
                outputArtifactKey: kpi
                producerTask: dt-model-evaluation
            lr_metrics:
              taskOutputArtifact:
                outputArtifactKey: kpi
                producerTask: lr-model-evaluation
        taskInfo:
          name: compare-model
      condition-1:
        componentRef:
          name: comp-condition-1
        dependentTasks:
        - compare-model
        - dt-model-evaluation
        - train-dt
        inputs:
          artifacts:
            pipelinechannel--train-dt-model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-dt
          parameters:
            pipelinechannel--compare-model-accuracy:
              taskOutputParameter:
                outputParameterKey: accuracy
                producerTask: compare-model
            pipelinechannel--compare-model-model_name:
              taskOutputParameter:
                outputParameterKey: model_name
                producerTask: compare-model
            pipelinechannel--dt-model-evaluation-approval:
              taskOutputParameter:
                outputParameterKey: approval
                producerTask: dt-model-evaluation
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
            pipelinechannel--trigger_id:
              componentInputParameter: trigger_id
        taskInfo:
          name: Choose DT Model
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-model_name']
            == 'DT'
      condition-3:
        componentRef:
          name: comp-condition-3
        dependentTasks:
        - compare-model
        - lr-model-evaluation
        - train-lr
        inputs:
          artifacts:
            pipelinechannel--train-lr-model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-lr
          parameters:
            pipelinechannel--compare-model-accuracy:
              taskOutputParameter:
                outputParameterKey: accuracy
                producerTask: compare-model
            pipelinechannel--compare-model-model_name:
              taskOutputParameter:
                outputParameterKey: model_name
                producerTask: compare-model
            pipelinechannel--lr-model-evaluation-approval:
              taskOutputParameter:
                outputParameterKey: approval
                producerTask: lr-model-evaluation
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
            pipelinechannel--trigger_id:
              componentInputParameter: trigger_id
        taskInfo:
          name: Choose LR Model
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-model_name']
            == 'LR'
      dt-model-evaluation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-dt-model-evaluation
        dependentTasks:
        - fetch-prod-model
        - train-dt
        - train-test-split
        inputs:
          artifacts:
            model_dt:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-dt
            test_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
          parameters:
            deployed_model_acc:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: fetch-prod-model
            thresholds_dict_str:
              componentInputParameter: thresholds_dict_str
        taskInfo:
          name: dt-model-evaluation
      fetch-prod-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-fetch-prod-model
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            test_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
          parameters:
            model_repo_uri:
              componentInputParameter: model_repo
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: fetch-prod-model
      importer:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-importer
        inputs:
          parameters:
            uri:
              componentInputParameter: dataset_uri
        taskInfo:
          name: importer
      lr-model-evaluation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-lr-model-evaluation
        dependentTasks:
        - fetch-prod-model
        - train-lr
        - train-test-split
        inputs:
          artifacts:
            model_lr:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-lr
            test_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
          parameters:
            deployed_model_acc:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: fetch-prod-model
            thresholds_dict_str:
              componentInputParameter: thresholds_dict_str
        taskInfo:
          name: lr-model-evaluation
      train-dt:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-dt
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-dt
      train-lr:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-lr
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-lr
      train-test-split:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-test-split
        dependentTasks:
        - importer
        inputs:
          artifacts:
            dataset:
              taskOutputArtifact:
                outputArtifactKey: artifact
                producerTask: importer
        taskInfo:
          name: train-test-split
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      dataset_uri:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      model_repo_uri:
        parameterType: STRING
      project_id:
        parameterType: STRING
      thresholds_dict_str:
        parameterType: STRING
      trigger_id:
        parameterType: STRING
  outputDefinitions:
    artifacts:
      dt-model-evaluation-kpi:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      dt-model-evaluation-metrics:
        artifactType:
          schemaTitle: system.ClassificationMetrics
          schemaVersion: 0.0.1
      lr-model-evaluation-kpi:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      lr-model-evaluation-metrics:
        artifactType:
          schemaTitle: system.ClassificationMetrics
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
